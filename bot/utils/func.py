import asyncio
import dataclasses
import datetime
import logging
import os
import re
import signal
import subprocess
from collections.abc import Callable
from typing import Any, Final

import psutil
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from telethon import TelegramClient
from telethon.errors import (
    PhoneCodeExpiredError,
    PhoneCodeInvalidError,
    PhoneNumberBannedError,
    PhoneNumberInvalidError,
    SessionPasswordNeededError,
)
from telethon.errors.rpcerrorlist import FloodWaitError

from bot.db.models import UserDB
from bot.keyboards.inline import ik_profile, ik_profile_without_sub
from bot.settings import se

logger = logging.getLogger(__name__)

TAIL_PID_FILE = ".pid"
TAIL_LOG_FILE = ".log"


logger = logging.getLogger(__name__)


@dataclasses.dataclass
class Result:
    success: bool
    message: str | None


class Function:
    max_length_message: Final[int] = 4000

    @staticmethod
    async def set_general_message(state: FSMContext, message: Message) -> None:
        data_state = await state.get_data()
        message_id = data_state.get("message_id")
        await Function._delete_keyboard(message_id, message)
        await state.update_data(message_id=message.message_id)

    @staticmethod
    async def state_clear(state: FSMContext) -> None:
        new_data = {}
        data_state = await state.get_data()
        for key, value in data_state.items():
            if key == "message_id":
                new_data[key] = value
        await state.clear()
        await state.set_data(new_data)

    @staticmethod
    async def _delete_keyboard(
        message_id_to_delete: int | None, message: Message
    ) -> None:
        if message_id_to_delete:
            try:
                await message.bot.edit_message_reply_markup(
                    chat_id=message.chat.id,
                    message_id=message_id_to_delete,
                    reply_markup=None,
                )
            except:  # noqa
                pass

    @staticmethod
    async def return_profile_text(user: UserDB):
        sub_end = user.date_sub_start + datetime.timedelta(days=user.quantity_days_sub)
        text = (
            f"–ü—Ä–æ—Ñ–∏–ª—å\n\n"
            f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {'üü¢' if user.receive_notifications else 'üî¥'}\n\n"
            f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {'–ü–†–û–ë–ù–´–ô' if user.quantity_days_sub == 3 else '–ü–û–õ–ù–´–ô –ü–ê–ö–ï–¢'}\n"
            f"–ö–æ–Ω–µ—Ü –ø–æ–¥–ø–∏—Å–∫–∏: {sub_end.strftime('%d.%m.%Y')}\n"
        )
        return text

    @staticmethod
    async def return_profile_keyboard(sub_active: bool):
        if sub_active:
            return ik_profile
        return ik_profile_without_sub

    class Manager:
        @staticmethod
        async def start_bot(
            phone: str, path_session: str, api_id: int, api_hash: str
        ) -> int:
            if not os.path.exists(se.script_path):
                logger.error("Bash script not found: %s", se.script_path)
                return -1

            await asyncio.create_subprocess_exec(
                se.script_path,
                path_session,
                str(api_id),
                api_hash,
                phone,
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                stdin=subprocess.DEVNULL,
                preexec_fn=os.setpgrp,
                start_new_session=True,
            )

            # –î–∞—ë–º —Å–∫—Ä–∏–ø—Ç—É –≤—Ä–µ–º—è —Å–æ–∑–¥–∞—Ç—å PID-—Ñ–∞–π–ª
            await asyncio.sleep(1)

            path_pid = os.path.join(se.path_to_folder, f"{phone}{TAIL_PID_FILE}")
            if os.path.exists(path_pid):
                with open(path_pid) as f:
                    pid = int(f.read())
                logger.info(f"Bot started with PID: {pid}")
                return pid
            logger.error(f"PID file not created for {phone}")
            return -1

        @staticmethod
        async def bot_run(phone: str) -> bool:
            path_pid = os.path.join(se.path_to_folder, f"{phone}{TAIL_PID_FILE}")
            if not os.path.exists(path_pid):
                return False
            with open(path_pid) as f:
                pid = int(f.read())
            return psutil.pid_exists(pid)

        @staticmethod
        async def stop_bot(phone: str, delete_session: bool = False) -> None:
            path_pid = os.path.join(se.path_to_folder, f"{phone}{TAIL_PID_FILE}")
            if not os.path.exists(path_pid):
                logger.info("PID-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            with open(path_pid) as f:
                pid = int(f.read())

            try:
                os.killpg(os.getpgid(pid), signal.SIGTERM)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å—É —Å PID: {pid}")
            except ProcessLookupError:
                logger.info("–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except PermissionError:
                logger.info("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞")

            files = [f"{phone}{TAIL_PID_FILE}"]
            if delete_session:
                files.append(f"{phone}.session")
            await Function.Manager.delete_files_by_name(se.path_to_folder, files)

        @staticmethod
        async def delete_files_by_name(folder_path: str, filenames: list[str]) -> None:
            """
            –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –≤ –ø–∞–ø–∫–µ.

            :param folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ.
            :param filenames: –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, ['file1.txt', 'temp.log']).
            """
            if not os.path.exists(folder_path):
                logger.info(f"–ü–∞–ø–∫–∞ {folder_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return

            for filename in os.listdir(folder_path):
                file_path = os.path.join(folder_path, filename)
                if os.path.isfile(file_path) and filename in filenames:
                    try:
                        os.remove(file_path)
                        logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                    except Exception as e:
                        logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")

    class Telethon:
        @staticmethod
        async def create_telethon_session(
            phone: str,
            code: str | int,
            api_id: int,
            api_hash: str,
            phone_code_hash: str,
            password: str | None,
            path: str,
        ) -> Result:
            """
            –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é Telethon —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ –∫–æ–¥—É (–∏ –ø–∞—Ä–æ–ª—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏).

            :param phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567)
            :param code: –ö–æ–¥ –∏–∑ SMS –∏–ª–∏ Telegram
            :param api_id: API ID –æ—Ç my.telegram.org
            :param api_hash: API Hash –æ—Ç my.telegram.org
            :param phone_code_hash: –•–µ—à, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞
            :param password: –ü–∞—Ä–æ–ª—å –æ—Ç –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω)
            :param path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏ (.session)
            :return: Result(success, message)
            """
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not phone or not phone.lstrip("+").isdigit():
                return Result(success=False, message="invalid_phone")

            if not api_id or not isinstance(api_id, int) or api_id <= 0:
                return Result(success=False, message="invalid_api_id")

            if not api_hash or not isinstance(api_hash, str) or len(api_hash) != 32:
                return Result(success=False, message="invalid_api_hash")

            if not path or not path.endswith(".session"):
                return Result(success=False, message="invalid_path")

            # –ü—Ä–∏–≤–æ–¥–∏–º code –∫ —Å—Ç—Ä–æ–∫–µ
            code_str = str(code).strip()

            client = None
            try:
                # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞
                client = TelegramClient(path, api_id, api_hash)

                await client.connect()
                logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone}...")

                if await client.is_user_authorized():
                    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
                    me = await client.get_me()
                    logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {me.first_name} (@{me.username})")
                    return Result(success=True, message=None)

                # –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
                try:
                    if password:
                        # –£–∂–µ –Ω—É–∂–µ–Ω 2FA ‚Äî –ø—Ä–æ–±—É–µ–º –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å
                        await client.sign_in(password=password)
                    else:
                        # –í—Ö–æ–¥ –ø–æ –∫–æ–¥—É
                        await client.sign_in(
                            phone=phone, code=code_str, phone_code_hash=phone_code_hash
                        )

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –ª–∏
                    if await client.is_user_authorized():
                        me = await client.get_me()
                        logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} (@{me.username})")
                        return Result(success=True, message=None)
                    return Result(success=False, message="auth_failed")

                except PhoneCodeInvalidError:
                    logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone}.")
                    return Result(success=False, message="invalid_code")

                except PhoneCodeExpiredError:
                    logger.warning(f"–ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone}.")
                    return Result(success=False, message="code_expired")

                except SessionPasswordNeededError:
                    logger.info(f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone}.")
                    return Result(success=False, message="password_required")

                except FloodWaitError as e:
                    wait_msg = (
                        f"–û–∂–∏–¥–∞–Ω–∏–µ FloodWait: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥."
                    )
                    logger.warning(wait_msg)
                    return Result(success=False, message=f"flood_wait:{e.seconds}")

                except Exception as e:
                    logger.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                    return Result(success=False, message=f"error:{e!s}")

            except Exception as e:
                logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
                return Result(success=False, message="critical_error")

            finally:
                # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
                if client:
                    try:
                        await client.disconnect()  # pyright: ignore
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")

        @staticmethod
        async def send_code_via_telethon(
            phone: str,
            api_id: int,
            api_hash: str,
            path: str,
        ) -> Result:
            """
            –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ Telegram.

            :param phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567)
            :param api_id: API ID –æ—Ç my.telegram.org
            :param api_hash: API Hash –æ—Ç my.telegram.org
            :param path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏ (.session)
            :return: phone_code_hash –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, –∏–Ω–∞—á–µ None –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ—à–∏–±–æ–∫
            """
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not phone or not phone.lstrip("+").isdigit():
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
                return Result(success=False, message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

            if not isinstance(api_id, int) or api_id <= 0:
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π API ID: {api_id}")
                return Result(success=False, message="–ù–µ–≤–µ—Ä–Ω—ã–π API ID")

            if not api_hash or not isinstance(api_hash, str) or len(api_hash) != 32:
                logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π API Hash.")
                return Result(success=False, message="–ù–µ–≤–µ—Ä–Ω—ã–π API Hash")

            if not path or not path.endswith(".session"):
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Å–µ—Å—Å–∏–∏: {path}")
                return Result(success=False, message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Å–µ—Å—Å–∏–∏")

            client = None
            try:
                # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç
                client = TelegramClient(path, api_id, api_hash)

                await client.connect()
                logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –Ω–∞ {phone}...")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if await client.is_user_authorized():
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {phone} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
                    return Result(success=False, message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
                result = await client.send_code_request(
                    phone=phone,
                    force_sms=False,  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                )

                phone_code_hash = result.phone_code_hash
                logger.info(
                    f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone}. Hash: {phone_code_hash[:8]}..."
                )
                return Result(success=True, message=phone_code_hash)

            except PhoneNumberInvalidError:
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
                return Result(success=False, message="–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

            except PhoneNumberBannedError:
                logger.exception(f"–ù–æ–º–µ—Ä {phone} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (banned) –≤ Telegram.")
                return Result(success=False, message="–ù–æ–º–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

            except SessionPasswordNeededError:
                logger.warning(
                    f"–î–ª—è –Ω–æ–º–µ—Ä–∞ {phone} —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å (2FA), –Ω–æ —Å–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞."
                )
                # –≠—Ç–æ —Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π: –∞–∫–∫–∞—É–Ω—Ç —Å 2FA, –Ω–æ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ ‚Äî –æ–±—ã—á–Ω–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                return Result(success=False, message="–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å")

            except FloodWaitError as e:
                wait_msg = f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ FloodWait: –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–¥. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥."
                logger.warning(wait_msg)
                # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ `flood_wait:XX`, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                return Result(success=False, message=wait_msg)

            except Exception as e:
                logger.exception(
                    f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –Ω–∞ {phone}: {e}"
                )
                return Result(
                    success=False,
                    message=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –Ω–∞ {phone}: {e}",
                )

            finally:
                # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
                if client:
                    try:
                        await client.disconnect()  # pyright: ignore
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")

    class Url:
        @staticmethod
        def message_link_for_chat(chat_id: int, text: str, message_id: int):
            """Generates link to a message, transforming telegram chat id to client peer id."""
            return f'<a href="https://t.me/c/{-(chat_id + 1000000000000)}/{message_id}">{text}</a>'

        @staticmethod
        def message_link_for_channel(channel_username: str, text: str, message_id: int):
            return f'<a href="https://t.me/{channel_username}/{message_id}">{text}</a>'

    class Text:
        @staticmethod
        async def _replace_by_slice(text, start, end, replacement):
            """
            –ó–∞–º–µ–Ω—è–µ—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫—É –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º —Å—Ä–µ–∑–∞ (start, end) –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É.

            :param text: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
            :param start: –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å—Ä–µ–∑–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
            :param end: –ö–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å—Ä–µ–∑–∞ (–Ω–µ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
            :param replacement: –°—Ç—Ä–æ–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å
            :return: –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–º–µ–Ω–æ–π
            """
            if start < 0:
                start = 0
            if end > len(text):
                end = len(text)
            if start > end:
                raise ValueError("–ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ")

            return text[:start] + replacement + text[end:]

        @staticmethod
        async def find_patterns(words: list[str], text: str) -> list[re.Match[str]]:
            if not words or not text:
                return []

            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –Ω–∞ —Å–ª—É—á–∞–π —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∏—Ö, –æ–±—ä–µ–¥–∏–Ω—è–µ–º —á–µ—Ä–µ–∑ |
            escaped_words = "|".join(re.escape(word) for word in words)

            # \b ‚Äî –≥—Ä–∞–Ω–∏—Ü–∞ —Å–ª–æ–≤–∞, —á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å —Ü–µ–ª—ã–µ —Å–ª–æ–≤–∞, –∞ –Ω–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
            pattern = rf"\b({escaped_words})\b"

            # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Å —Ñ–ª–∞–≥–æ–º IGNORECASE
            regex = re.compile(pattern, re.IGNORECASE)

            return list(regex.finditer(text))

        @staticmethod
        async def highlight_words(
            text: str,
            matches: list[re.Match[str]],
            html_tag: str | None = "b",
            edit_str_func: Callable[[str], str] | None = lambda x: x.upper(),
        ) -> str:
            offset = 0
            for match in matches:
                start, end = match.span()

                if offset:
                    start += offset
                    end += offset

                if html_tag:
                    t = f"<{html_tag}>{match.group()}</{html_tag}>"
                else:
                    t = match.group()

                t = edit_str_func(t) if edit_str_func else t

                text = await Function.Text._replace_by_slice(
                    text,
                    start,
                    end,
                    t,
                )
                offset += len(t) - len(match.group())
            return text


class Chunker:
    async def _get_chunk_recursive(
        self,
        model_db: Any,
        session: AsyncSession,
        ind_chunk: int | None,
        fetched_data: list[Any] | None = None,
    ):
        if fetched_data is None:
            data = (await session.scalars(select(model_db))).all()
        else:
            data = fetched_data

        quantity_chunks = self._count_chunks(len(data))  # –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        ind_chunk = ind_chunk or quantity_chunks or 1  # —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        chunk: list[Any] = await self._get_chunk(  # –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–∞–ª–∞—Ö
            list(data),
            ind_chunk=ind_chunk,
        )

        if not chunk and ind_chunk > 1:
            return await self._get_chunk_recursive(
                model_db,
                session,
                ind_chunk - 1,
                list(data),
            )

        self.ind_chunk = ind_chunk
        self.chunk = chunk
        self.quantity_chunks = quantity_chunks

        return chunk

    @staticmethod
    def _count_chunks(len_data: int, chunk_size: int = 10) -> int:
        remains = len_data % chunk_size
        return len_data // chunk_size + (1 if remains else 0)

    @staticmethod
    async def _get_chunk(
        data: list[Any],
        ind_chunk: int,
        chunk_size: int = 10,
    ) -> list[Any]:
        return data[(ind_chunk - 1) * chunk_size : ind_chunk * chunk_size]

    async def __call__(
        self,
        model_db: Any,
        session: AsyncSession,
        ind_chunk: int | None,
        func_to_str: Callable,
        if_none_result: str,
        fetched_data: list[Any] | None = None,
    ) -> Any:
        chunk = await self._get_chunk_recursive(
            model_db=model_db,
            session=session,
            ind_chunk=ind_chunk,
            fetched_data=fetched_data,
        )

        start_numerate = (self.ind_chunk - 1) * 10
        text = await func_to_str(chunk, start_numerate)

        if text is None:
            return if_none_result

        return text
